// Generated by Xata Codegen 0.27.0. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "users",
    columns: [
      { name: "userid", type: "string" },
      { name: "username", type: "string" },
      { name: "completed", type: "int" },
      { name: "total-product", type: "int" },
    ],
  },
  {
    name: "products",
    columns: [
      { name: "productID", type: "string" },
      { name: "productName", type: "string" },
      { name: "rating", type: "int" },
      { name: "done", type: "bool" },
      { name: "image", type: "string" },
      { name: "description", type: "string" },
      { name: "price", type: "int" },
      { name: "provider", type: "string" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Users = InferredTypes["users"];
export type UsersRecord = Users & XataRecord;

export type Products = InferredTypes["products"];
export type ProductsRecord = Products & XataRecord;

export type DatabaseSchema = {
  users: UsersRecord;
  products: ProductsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: "https://Timi-s-workspace-eouder.us-east-1.xata.sh/db/wishme",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
